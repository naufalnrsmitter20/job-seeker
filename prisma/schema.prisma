// Prisma schema file
// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// Enums
// =========================
enum userRole {
  USER
  HRD
  ADMIN
}

enum applyingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum jobStatus {
  OPEN
  CLOSED
}

// =========================
// Models
// =========================

model User {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  password        String
  profile_picture String?
  role            userRole @default(USER)
  verified        Boolean  @default(false)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Society                 Society?
  company                 Company[]
  emailVerificationToken  EmailVerificationToken?

  @@map("users")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
}

model Society {
  id            String   @id @default(cuid())
  name          String
  phone         String
  date_of_birth DateTime
  gender        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  portfolios      Portfolio[]
  positionApplied PositionApplied[]
  address        Address[]

  @@map("societies")
}

model Address{
  id      String @id @default(cuid())
  street  String
  city    String
  state   String
  country String
  zip     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  societyId String?
  Society   Society? @relation(fields: [societyId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Portfolio {
  id          String @id @default(cuid())
  skill       String
  description String
  file        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  societyId String?
  Society   Society? @relation(fields: [societyId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model Company {
  id          String  @id @default(cuid())
  name        String
  address     String
  phone       String
  email       String  @unique
  website     String?
  logo        String?
  description String  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  availablePosition AvailablePosition[]

  @@map("companies")
}

model AvailablePosition {
  id                  String    @id @default(cuid())
  positionName        String
  capacity            Int
  description         String    @db.Text
  requirements        String    @db.Text
  status              jobStatus @default(OPEN)
  submissionStartDate DateTime
  submissionEndDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  positionApplied PositionApplied[]

  @@map("available_positions")
}

model PositionApplied {
  id             String         @id @default(cuid())
  applyingStatus applyingStatus @default(PENDING)
  applyDate      DateTime       @default(now())

  societyId String?
  Society   Society? @relation(fields: [societyId], references: [id])

  availablePositionId String?
  AvailablePosition   AvailablePosition? @relation(fields: [availablePositionId], references: [id], onDelete: Cascade)

  @@map("position_applies")
}
